
plugins {
    id 'com.android.application'
}


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    viewBinding.enabled = true

    defaultConfig {
        applicationId "com.example.guardiana"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // ...
        // Set the properties within `local.properties` into a `Properties` class so that values
        // within `local.properties` (e.g. Maps API key) are accessible in this file.
        Properties properties = new Properties()
        if (rootProject.file("local.properties").exists()) {
            properties.load(rootProject.file("local.properties").newDataInputStream())
        }

        // Inject the Maps API key into the manifest
        manifestPlaceholders = [ mapsApiKey : properties.getProperty("MAPS_API_KEY", "") ]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dependencies {
        implementation 'org.tensorflow:tensorflow-android:1.6.0'
    }

    aaptOptions {
        noCompress "tflite"
    }

    // Interpreter 52 - 66
    lintOptions {
        abortOnError false
    }
    flavorDimensions "tfliteInference"
    productFlavors {
        // The TFLite inference is built using the TFLite Java interpreter.
        interpreter {
            dimension "tfliteInference"
        }
        // Default: The TFLite inference is built using the TFLite Task library (high-level API).
        taskApi {
            getIsDefault().set(true)
            dimension "tfliteInference"
        }
    }

    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
}

// import DownloadModels task
project.ext.ASSET_DIR = projectDir.toString() + '/src/main/assets'
project.ext.TMP_DIR   = project.buildDir.toString() + '/downloads'

// Download default models; if you wish to use your own models then
// place them in the "assets" directory and comment out this line.
//apply from:'download_model.gradle'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.android.application'

// Kotlin class support
apply plugin: 'kotlin-android'

dependencies {

    // App intro
    implementation 'com.github.AppIntro:AppIntro:6.0.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Firebase analytics
    //implementation 'com.google.firebase:firebase-analytics:18.0.0'

    // Firebase login UI
    implementation 'com.firebaseui:firebase-ui-auth:6.4.0'

    // Firebase
    implementation 'com.google.firebase:firebase-firestore:23.0.0'

    // Google places API
    implementation 'com.google.android.libraries.places:places:2.4.0'

    // Pin View
    implementation 'com.chaos.view:pinview:1.4.4'

    //Chip Navigation
    implementation 'com.ismaeldivita.chipnavigation:chip-navigation-bar:1.3.2'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.4.31'

    // Login butt
    implementation 'br.com.simplepass:loading-button-android:1.14.0'

    // Loading spinner
    implementation 'com.github.ybq:Android-SpinKit:1.4.0'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // Gson converter
    //implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Jackson converter
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'

    // Sweet alert progress dialog
    implementation 'com.github.f0ris.sweetalert:library:1.6.2'
    implementation 'com.google.android.gms:play-services-maps:17.0.1'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"

    // To get currentLocation new way
    implementation 'com.google.android.gms:play-services-location:18.0.0'

    // Google maps cluster items
    implementation 'com.google.maps.android:android-maps-utils:1.2.1'

    // Route between two points
    implementation 'com.github.jd-alexander:library:1.1.0'

    // TF Lite
    implementation 'org.tensorflow:tensorflow-lite:2.4.0'

    // TF Lite module library
    implementation project(path: ':lib_interpreter')
    interpreterImplementation project(path: ':lib_interpreter')
    taskApiImplementation project(path: ':lib_task_api')

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}